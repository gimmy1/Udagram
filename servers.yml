Parameters:
  EnvironmentName:
    Description: An environment that will be prefixed to resources
    Type: String
  
  WebServerImageId:
    Description: Web serve image id
    Type: String
    Default: ami-00a54827eb7ffcd3c

  AMItoUse:
      Description: AMI to use for our base image
      Type: String
  
  WebServerVolumeSize:
    Description: Disk volume size for WebServer
    Type: String
    Default: 10

Resources:
  # An IAM role is an IAM identity that you can create in your account that has specific permissions.
  # An IAM role is similar to an IAM user, in that it is an AWS identity with permission policies
  # that determine what the identity can and cannot do in AWS. However, instead of being uniquely
  # associated with one person, a role is intended to be assumable by anyone who needs it. Also,
  # a role does not have standard long-term credentials such as a password or access keys associated
  # with it. Instead, when you assume a role, it provides you with temporary security credentials
  # for your role session
  # Web server Role
  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # An instance profile is a container for an IAM role that you can use to pass role information
  # to an EC2 instance when the instance starts.
  ProfileWithRolesForApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref UdacityS3ReadOnlyEC2


  # Security Groups
  # Security group defines rules that reflect the role of the instance that's associated
  # with the security group. For example, an instance that's configured as a web server
  # needs security group rules that allow inbound HTTP and HTTPS access
  

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load Balancer Sec. Group
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web Server Sec. Group
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
    
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: !Ref AMItoUse
      IamInstanceProfile: !Ref ProfileWithRolesForApp
      SecurityGroups:
      - !Ref WebServerSecGroup
      InstanceType: t2.micro
      BlockDeviceMappings:
      - DeviceName: /dev/sdk
        Ebs:
          VolumeSize: '10'
  
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${EnvironmentName}-VPCID
  
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PrivateSubnetIDs"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      TargetGroupARNs:
        - !Ref WebAppTargetGroup
  
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet1ID
      - Fn::ImportValue: !Sub ${EnvironmentName}-PublicSubnet2ID
      SecurityGroups:
        - !Ref LBSecGroup
  
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: '80'
      Protocol: HTTP
  
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1

Outputs:
  LoadBalancerDNS:
    Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
    Export:
      Name: DNS-URL